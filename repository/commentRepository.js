// server/repository/commentRepository.js

import supabase from '../util/supabaseClient.js'

export const CommentRepository = {
    async getNotificationsByUserId(userId) {
    try {
      console.log('üîç Fetching notifications for admin:', userId)

      // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á comments ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡∏≠‡∏á admin
      const { data: comments, error: commentsErr } = await supabase
        .from('comments')
        .select('id, comment_text, user_id, post_id, created_at')
        .neq('user_id', userId) // ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏°‡∏≤ comment
        .order('created_at', { ascending: false })
        .limit(100) // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£

      if (commentsErr) {
        console.error('‚ùå Error fetching comments:', commentsErr)
        throw new Error(`Failed to fetch comments: ${commentsErr.message}`)
      }

      if (!comments || comments.length === 0) {
        console.log('‚ÑπÔ∏è No comments found')
        return []
      }

      console.log(`‚úÖ Found ${comments.length} comments from others`)

      // 2Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• posts ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      const postIds = [...new Set(comments.map(c => c.post_id))]
      
      const { data: posts, error: postsErr } = await supabase
        .from('posts')
        .select('id, title, image, description')
        .in('id', postIds)

      if (postsErr) {
        console.error('‚ùå Error fetching posts:', postsErr)
        throw new Error(`Failed to fetch posts: ${postsErr.message}`)
      }

      // 3Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å table users
      const userIds = [...new Set(comments.map(c => c.user_id))]
      
      const { data: users, error: usersErr } = await supabase
        .from('users')
        .select('id, name, username, profile_pic')
        .in('id', userIds)

      if (usersErr) {
        console.error('‚ùå Error fetching users:', usersErr)
        throw new Error(`Failed to fetch users: ${usersErr.message}`)
      }

      const usersById = (users || []).reduce((acc, u) => {
        acc[u.id] = {
          id: u.id,
          name: u.name || null,
          username: u.username || null,
          profile_pic: u.profile_pic || null
        }
        return acc
      }, {})

      // 4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á post map
      const postsById = (posts || []).reduce((acc, p) => {
        acc[p.id] = {
          id: p.id,
          title: p.title,
          image_url: p.image, // ‡πÅ‡∏õ‡∏•‡∏á image -> image_url
          description: p.description
        }
        return acc
      }, {})

      // 5Ô∏è‚É£ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const notifications = comments.map((c) => ({
        ...c,
        user: usersById[c.user_id] || null,
        post: postsById[c.post_id] || null
      }))

      console.log(`‚úÖ Returning ${notifications.length} notifications`)
      return notifications

    } catch (error) {
      console.error('‚ùå Error in getNotificationsByUserId:', error)
      throw error
    }
  },

  async createComment({ post_id, user_id, comment_text }) {
    const { data, error } = await supabase
      .from('comments')
      .insert([{ post_id, user_id, comment_text }])
      .select()

    if (error) throw new Error(error.message)
    return data[0]
  },

  async deleteComment(commentId, userId) {
    // ‚úÖ ‡∏•‡∏ö comment ‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ user_id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏•‡∏ö
    const { error } = await supabase
      .from('comments')
      .delete()
      .eq('id', commentId)
      .eq('user_id', userId)

    if (error) throw new Error(error.message)
    return true
  },
}
